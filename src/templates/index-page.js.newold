import React from "react";
import { graphql } from "gatsby";
import { GatsbyImage, getImage } from "gatsby-plugin-image"
import Layout from "../components/Layout";
import StarDivider from "../components/Star-divider";
import RotorBox from "../components/RotorBox"
import LogoGallery from "../components/LogoGallery";
import UpwindBack from "../img/upwind-back.svg"
import LargeCTA from "../components/LargeCTA";
import SEO from "../components/SEO";
import RotorButton from "../components/RotorButton";
import Services from "../components/Services";
import ScrollPopup from "../components/ScrollPopup";
import CleanHero from "../components/CleanHero";
import MarketingSection from "../components/MarketingSection";






const IndexPageTemplate = ({ meta, title, hero, challenge, solution, who, model, customers, services, servicesHeadline }) => {

  const heroImage = getImage(hero.image)
  const headlineImage = getImage(hero.headlineimg)

  const challengeImage = getImage(challenge.image)
  const solutionImage1 = getImage(solution.image1)
  const solutionImage2 = getImage(solution.image2)
  const solutionImage3 = getImage(solution.image3)
  const whoImage1 = getImage(who.image1)
  const customerImage1 = getImage(customers.image1)
  const customerImage2 = getImage(customers.image2)
  const bossImage1 = getImage(customers.bossimage1)
  const bossImage2 = getImage(customers.bossimage2)



  return (
    <div>
      <ScrollPopup/>

<SEO title={title} description={meta.description} slug="" />

<CleanHero heroImage={heroImage} title={title} buttonText={hero.cta.buttonText}/>
{/* headline, description, services, imageData, buttonText, onButtonClick  */}


      {/*hero section*/}

      <div style={{ display: "grid", position: "relative", height:'850px' }}>
    <GatsbyImage image={heroImage} loading="eager" alt={hero.imagealt} style={{
          gridArea: "1/1",
         
          // You can set a maximum height for the image, if you wish.
          // maxHeight: 600,
        }}/>
        <div
        style={{
          // By using the same grid area for both, they are stacked on top of each other
          gridArea: "1/1",
          position: "absolute",
          width: "100%",
          left:"0%",
          top:"10%",
          // This centers the other elements inside the hero component
          placeItems: "center",
          display: "grid",
        }}
      >
        {/* Any content here will be centered in the component */}

        
       
        <div className="mt-1 has-text-white mx-auto has-text-centered has-text-weight-bold has-tight-spacing is-size-3 is-size-5-mobile p-3"> 
        <h1 className="has-text-white has-text-weight-bold has-tight-spacing is-size-4 is-size-5-mobile">Rotor Digitalbyr√•</h1>
     
              <div>
              <GatsbyImage image={headlineImage} alt={hero.imagealt} />
            
                {/*<h2 className="has-rainbow is-ultralarge is-size-1-mobile has-text-weight-bold mb-4 has-tight-height">{hero.headline}</h2>*/}
              </div>
              <h3 className="column is-6-desktop is-offset-3-desktop has-text-white has-text-weight-bold has-tight-spacing is-size-4 is-size-5-mobile my-3">{hero.subtext}</h3>
              {/* <h3 className="column is-6-desktop is-offset-3-desktop has-text-white has-tight-spacing is-size-5 is-size-6-mobile"><i>{hero.subtext2}</i></h3> */}
              <RotorButton buttonText={hero.cta.buttonText} buttonLink={hero.cta.buttonLink} newWindow={true}/>
            </div>
        {hero.text}
        </div>
      </div>
    

{/*       <div style={{
        backgroundImage: `url(${HeroBack})`, backgroundRepeat: 'no-repeat', backgroundSize: 'cover',
      }}>
       
        <div className="hero-body container pb-6">
          <div className="columns is-desktop is-vcentered my-6">
            <div className="column is-half-desktop is-10-mobile is-offset-1-mobile">
              <div className="has-rainbow-parent">
              <GatsbyImage image={headlineImage} alt={hero.imagealt} />
              
              </div>
              <h3 className="has-text-white has-text-weight-bold has-tight-spacing is-size-4 is-size-5-mobile mb-4">{hero.subtext}</h3>
              <h3 className="has-text-white has-tight-spacing is-size-4 is-size-5-mobile"><i>{hero.subtext2}</i></h3>
            </div>
            <div className="column is-half-desktop has-text-centered level-right">
     

            </div>
          </div>
          <div className="mb-6">
          <RotorCTA buttonText={hero.cta.buttonText} buttonLink={hero.cta.buttonLink} headline={hero.cta.headline} text={hero.cta.text} />
          </div>



        </div>
      </div> */}

<div>
<Services services={services} headline={servicesHeadline}/>
</div>
      {/*challenge section*/}
      <div className="hero-body has-background-white">
        <div className="columns">

          <div className="column py-5 has-background-rotor-turq-med is-8-desktop is-offset-2-desktop is-8-tablet is-offset-2-tablet">
            <div className="columns is-flex-direction-column">
              <StarDivider customClass="column is-full mb-3" />
              <div className="column is-8-desktop is-offset-2-desktop is-10-mobile is-offset-1-mobile">
                <h2 className="is-size-2 mb-4">{challenge.headline}</h2>
                <p className="content" dangerouslySetInnerHTML={{ __html: challenge.text }}></p>
                <div className="has-text-centered mt-6 is-rotated-right">
                  <GatsbyImage image={challengeImage} alt={challenge.imagealt}/>
                </div>

              </div>

              <StarDivider customClass="column is-full mt-3" />
            </div>
          </div>

        </div>
      </div>

      {/*solution section1*/}
      <div className="hero-body" style={{
        backgroundImage: `url(${UpwindBack})`, backgroundRepeat: 'no-repeat', backgroundSize: 'cover',
      }}>
        <div className="columns is-vcentered">

          <div className="column is-one-third-desktop is-offset-1 is-half-tablet has-background-info has-text-white my-6 is-relative ">
            <div className="px-2 py-4 has-star-right is-10-mobile is-offset-1-mobile">
              <h2 className="is-size-2 mb-4">{solution.headline1}</h2>
              <p dangerouslySetInnerHTML={{ __html: solution.text1 }}></p>
            </div>


          </div>
          <div className="column is-two-thirds has-text-centered is-full-tablet">
            <div className="is-rotated-left mb-3">
              <GatsbyImage image={solutionImage1} alt={solution.imagealt1}/>
            </div>
            <div className="pb-6">
              <GatsbyImage image={solutionImage2} alt={solution.imagealt2}/>
            </div>
          </div>


        </div>
      </div>
    
      
      {/*solution section2*/}
      <div className="hero-body has-background-white" >
        <div className="columns is-vcentered is-flex-direction-row-reverse">



          <div className="column is-half-desktop is-half-tablet has-background-info has-text-white my-6 is-relative" style={{zIndex:'1'}}>
            <div className="column px-2 py-4 has-whirl-right is-8-desktop is-offset-2-desktop">
              <h2 className="is-size-2 mb-4">{solution.headline2}</h2>
              <p dangerouslySetInnerHTML={{ __html: solution.text2 }}></p>
            </div>


          </div>
          <div className="column is-half has-text-centered is-full-tablet is-half-mobile is-offset-one-quarter-mobile">
            <div className="is-rotated-left mb-3">
              <GatsbyImage image={solutionImage3}  alt={solution.imagealt3}/>
            </div>

          </div>


        </div>
      </div>
     {/* largecta */}
      <div className="has-background-white">
     <LargeCTA/>
      </div>

      {/*who section

<RotorBox headline={who.headline1} subtext={who.subtext1} text={who.text1} ref={observe}/> style={{height:`${height}px`}} */}


      <div className="has-background-info py-6">
        <StarDivider customClass="column is-full mb-6" />

        <div className="columns is-vcentered" >
         <div className="column is-half">
          <RotorBox headline={who.headline1} subtext={who.subtext1} text={who.text1}/>
          </div>
          <div className="has-text-centered is-full-tablet">
              <GatsbyImage image={whoImage1} alt={who.imagealt1}/>
            </div>
        </div>

      </div>

       <div className="container">
      <h2 className="is-size-2 mt-6 mb-4 has-text-centered mx-3">{who.headline2}</h2>
    
      <div className="is-flex is-flex-wrap-wrap is-justify-content-center mb-6">
        {who.text2.map(item => (
          <div className="has-star-swipe is-size-7-mobile">
            <h3>
              {item}
            </h3>
          </div>

        ))}
      </div>
    </div> 

      {/*<Lottie autoPlay="true" hover="true"/> 
    <LottieScroll boxHeight={200} animation={animation1} mode={"s"} type = {"toggle"} frames ={[0, 95]} visibility={[0.4, 0.9]} />
*/}

<div className="py-6 has-background-info">
<LogoGallery />
</div>

<div className="has-background-info" style={{height:'200px'}}></div>
<div className="hero-body container pb-6" style={{transform:'translateY(-150px)'}}>
          <div className="columns mb-6">
            <div className="column is-5 has-background-warning p-6 mb-3">
              <GatsbyImage image={customerImage1} alt={hero.imagealt} />
              <div className="mt-5 has-text-weight-bold has-background-link is-inline-block p-1">{customers.customer1}</div>
              <h3 className="is-size-4 mb-4 mt-3">{customers.headline1}</h3>
              <p dangerouslySetInnerHTML={{ __html: customers.text1 }}></p>
              <div className="has-text-centered mt-4">
                <GatsbyImage image={bossImage1} alt={hero.imagealt}/>
              </div>
              
              <p className="mt-4 has-text-centered"><i>{customers.name1}</i></p>
              
            </div>
           
            <div className="column is-5 is-offset-1 has-background-warning p-6 mb-3">
              <GatsbyImage image={customerImage2} alt={hero.imagealt} />
              <div className="mt-5 has-text-weight-bold has-background-link is-inline-block p-1">{customers.customer2}</div>
              <h3 className="is-size-4 mb-4 mt-3">{customers.headline2}</h3>
              <p dangerouslySetInnerHTML={{ __html: customers.text2 }}></p>
              <div className="has-text-centered mt-4">
                <GatsbyImage image={bossImage2} alt={hero.imagealt}/>
              </div>
              
              <p className="mt-4 has-text-centered"><i>{customers.name2}</i></p>
            </div>
          </div>
      



        </div>
      

      {/*<LottieScroll boxHeight={200} animation={animation1} mode={"scroll"} type = {"seek"} frames ={[0, 95]} visibility={[0.4, 0.9]} />*/}


    </div>
  )
}



const IndexPage = ({ data }) => {
  const { frontmatter } = data.markdownRemark;

  return (
    <Layout>
      <IndexPageTemplate
        meta={frontmatter.meta}
        title={frontmatter.title}
        hero={frontmatter.hero}
        challenge={frontmatter.challenge}
        solution={frontmatter.solution}
        model={frontmatter.model}
        customers={frontmatter.customers}
        who={frontmatter.who}
        services={frontmatter.services}

      />
    </Layout>
  )
} 
export default IndexPage


export const IndexPageQuery = graphql`
query RotorStartTemplate {
  markdownRemark(frontmatter: {templateKey: {eq: "index-page"}}) {
    frontmatter {
      title
      path
      meta {
        description
      }
      hero {
        headline
        headlineimg {
          childImageSharp {
            gatsbyImageData(quality: 100, width: 730)
          }
        }
        subtext
        subtext2
        imagealt
        image {
          childImageSharp {
            gatsbyImageData(quality: 100, width: 1920, layout: FULL_WIDTH, transformOptions: { fit: OUTSIDE, cropFocus: ENTROPY })
          }
        }
        cta {
          text
          buttonText
          buttonLink
          headline
        }
      }
      
      challenge {
        headline
        text
        imagealt
        image {
          childImageSharp {
            gatsbyImageData(quality: 50, width: 250)
          }
        }
      }
      servicesHeadline
      services {
        service {
          name
          tooltip
        }
      }
      solution {
        headline1
        headline2
        text1
        imagealt1
        image1 {
          childImageSharp {
            gatsbyImageData(quality: 50, width: 200)
          }
        }
        imagealt2
        image2 {
          childImageSharp {
            gatsbyImageData(quality: 50, width: 200)
          }
        }
        text2
        imagealt3
        image3 {
          childImageSharp {
            gatsbyImageData(quality: 100, width: 400)
          }
        }
 

      }
      who {
        headline1
        subtext1
        text1
        headline2
        text2
        imagealt1
        image1 {
          childImageSharp {
            gatsbyImageData(quality: 50, width: 650)
          }
        }
      }
      model {
        headline
        subtext
        image {
          childImageSharp {
            id
            gatsbyImageData(quality: 100, width: 800)
          }
        }
        ctatext
      }
      customers {
        customer1
        headline1
        text1
        name1
        bossimage1 {
          childImageSharp {
            id
            gatsbyImageData(quality: 100, width: 100)
          }
        }
        image1 {
          childImageSharp {
            id
            gatsbyImageData(quality: 100, width: 800)
          }
        }
        customer2
        headline2
        text2
        name2
        bossimage2 {
          childImageSharp {
            id
            gatsbyImageData(quality: 100, width: 100)
          }
        }
        image2 {
          childImageSharp {
            id
            gatsbyImageData(quality: 100, width: 800)
          }
        }
      }
      
    }
  }
}
`;
